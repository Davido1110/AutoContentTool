from flask import Flask, request, jsonify
from flask_cors import CORS
import openai
import os
from dotenv import load_dotenv
import requests
from bs4 import BeautifulSoup
import re
import logging

# Load environment variables
load_dotenv()

# Initialize Flask app
app = Flask(__name__)
# C·∫•u h√¨nh CORS chi ti·∫øt h∆°n
CORS(app, resources={
    r"/api/*": {
        "origins": ["https://frontend-alpha-sable-56.vercel.app", "http://localhost:3000"],
        "methods": ["POST", "OPTIONS"],
        "allow_headers": ["Content-Type"]
    }
})

# Set OpenAI API key
api_key = os.getenv("OPENAI_API_KEY")
openai.api_key = api_key

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

@app.route("/", methods=["GET"])
def root():
    return jsonify({"message": "H·ªá th·ªëng ƒëang ho·∫°t ƒë·ªông"})

@app.route("/test", methods=["GET"])
def test():
    if not api_key:
        return jsonify({"error": "Ch∆∞a c·∫•u h√¨nh OpenAI API key"}), 500
    return jsonify({
        "status": "success",
        "message": "API ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng",
        "openai_key_configured": bool(api_key)
    })

def clean_url(url):
    # Lo·∫°i b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát ·ªü ƒë·∫ßu URL
    url = url.strip().lstrip('@')
    
    # ƒê·∫£m b·∫£o URL b·∫Øt ƒë·∫ßu b·∫±ng https://
    if not url.startswith('http'):
        url = 'https://' + url
    
    # ƒê·∫£m b·∫£o c√≥ www n·∫øu l√† domain leonardo.vn
    if 'leonardo.vn' in url and 'www.' not in url:
        url = url.replace('https://', 'https://www.')
        
    return url

def get_product_info(url):
    # T·∫°o session ƒë·ªÉ duy tr√¨ cookies
    session = requests.Session()
    
    # Headers gi·∫£ l·∫≠p tr√¨nh duy·ªát Chrome tr√™n Mac
    headers = {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
        'Accept-Language': 'vi-VN,vi;q=0.9,en-US;q=0.8,en;q=0.7',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none',
        'Sec-Fetch-User': '?1',
        'Cache-Control': 'max-age=0',
        'Referer': 'https://www.leonardo.vn/',
        'Origin': 'https://www.leonardo.vn'
    }
    
    try:
        # Tr∆∞·ªõc ti√™n truy c·∫≠p trang ch·ªß ƒë·ªÉ l·∫•y cookies
        logger.info("Accessing homepage to get cookies...")
        session.get('https://www.leonardo.vn/', headers=headers, timeout=10)
        
        # Sau ƒë√≥ m·ªõi truy c·∫≠p trang s·∫£n ph·∫©m
        logger.info(f"Accessing product page: {url}")
        response = session.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        
        # Log response status v√† headers
        logger.info(f"Response status: {response.status_code}")
        logger.info(f"Response headers: {dict(response.headers)}")
        
        # Parse HTML
        soup = BeautifulSoup(response.text, 'html5lib')
        
        # T√¨m th√¥ng tin s·∫£n ph·∫©m
        product_info = []
        
        # T√¨m t√™n s·∫£n ph·∫©m
        product_name = soup.find('h1', class_='product-title')
        if product_name:
            product_info.append(f"T√™n s·∫£n ph·∫©m: {product_name.get_text().strip()}")
        
        # T√¨m gi√°
        product_price = soup.find('span', class_='price')
        if product_price:
            product_info.append(f"Gi√°: {product_price.get_text().strip()}")
        
        # T√¨m m√¥ t·∫£ s·∫£n ph·∫©m - th·ª≠ nhi·ªÅu selector kh√°c nhau
        description_selectors = [
            'div.product-description',
            'div.description',
            'div[itemprop="description"]',
            '.product__description',
            '#product-description',
            '.product-single__description',
            '.product-info__description'
        ]
        
        for selector in description_selectors:
            description = soup.select_one(selector)
            if description:
                text = description.get_text().strip()
                if text and text not in product_info:
                    product_info.append(text)
                    break
        
        # T√¨m th√¥ng tin chi ti·∫øt
        details = soup.find_all(['li', 'div'], string=re.compile(r'(Ch·∫•t li·ªáu|Size|K√≠ch th∆∞·ªõc|ƒê·ªïi size|M·∫πo s·ª≠ d·ª•ng)'))
        for detail in details:
            text = detail.get_text().strip()
            if text and text not in product_info:
                product_info.append(text)
        
        if not product_info:
            logger.warning("No product information found in the page")
            # Log HTML content ƒë·ªÉ debug
            logger.debug(f"Page HTML: {response.text[:1000]}...")
            return None
            
        return "\n".join(product_info)
        
    except Exception as e:
        logger.error(f"Error fetching product info: {str(e)}")
        return None

@app.route("/api/fetch-product", methods=["POST", "OPTIONS"])
def fetch_product():
    if request.method == "OPTIONS":
        return "", 204
        
    try:
        # Nh·∫≠n URL t·ª´ frontend
        product_url = request.form.get("product_url")
        logger.info(f"Received URL: {product_url}")
        
        if not product_url:
            return jsonify({
                "status": "error",
                "message": "Vui l√≤ng cung c·∫•p URL s·∫£n ph·∫©m"
            }), 400
            
        # L√†m s·∫°ch URL
        product_url = clean_url(product_url)
        logger.info(f"Cleaned URL: {product_url}")
            
        # Ki·ªÉm tra xem c√≥ ph·∫£i URL c·ªßa Leonardo kh√¥ng
        if "leonardo.vn" not in product_url:
            return jsonify({
                "status": "error",
                "message": "URL kh√¥ng h·ª£p l·ªá. Ch·ªâ h·ªó tr·ª£ s·∫£n ph·∫©m t·ª´ leonardo.vn"
            }), 400
            
        # L·∫•y th√¥ng tin s·∫£n ph·∫©m
        product_info = get_product_info(product_url)
        
        if not product_info:
            return jsonify({
                "status": "error",
                "message": "Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m"
            }), 404
            
        return jsonify({
            "status": "success",
            "description": product_info
        })
        
    except Exception as e:
        logger.error(f"Error in fetch_product: {str(e)}")
        return jsonify({
            "status": "error",
            "message": f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}"
        }), 500

@app.route("/api/generate-content", methods=["POST", "OPTIONS"])
def generate_content():
    if request.method == "OPTIONS":
        return "", 204
        
    if not api_key:
        return jsonify({"error": "Ch∆∞a c·∫•u h√¨nh OpenAI API key"}), 500

    try:
        print("Received form data:", request.form)  # Debug log
        
        # Get form data
        product_description = request.form.get("product_description")
        product_link = request.form.get("product_link", "https://leonardo.vn")
        gender = request.form.get("gender")
        age_group = request.form.get("age_group")
        platform = request.form.get("platform")
        
        if not all([product_description, gender, age_group, platform]):
            missing_fields = []
            if not product_description: missing_fields.append("product_description")
            if not gender: missing_fields.append("gender")
            if not age_group: missing_fields.append("age_group")
            if not platform: missing_fields.append("platform")
            
            return jsonify({
                "error": "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin",
                "missing_fields": missing_fields
            }), 400

        # Chuy·ªÉn ƒë·ªïi gender sang ti·∫øng Vi·ªát
        gender_vn = "nam" if gender == "male" else "n·ªØ"
        
        # Chuy·ªÉn ƒë·ªïi age_group sang m√¥ t·∫£ ti·∫øng Vi·ªát
        age_descriptions = {
            "18-22": "18-22 tu·ªïi (sinh vi√™n, m·ªõi ƒëi l√†m)",
            "23-28": "23-28 tu·ªïi (ph√°t tri·ªÉn s·ª± nghi·ªáp)",
            "29-35": "29-35 tu·ªïi (s·ª± nghi·ªáp ·ªïn ƒë·ªãnh)"
        }
        age_group_vn = age_descriptions.get(age_group, age_group)

        system_message = """B·∫°n l√† m·ªôt chuy√™n gia marketing v√† copywriting chuy√™n nghi·ªáp, th√†nh th·∫°o ti·∫øng Vi·ªát v√† am hi·ªÉu s√¢u s·∫Øc v·ªÅ insight c·ªßa ng∆∞·ªùi ti√™u d√πng Vi·ªát Nam. B·∫°n lu√¥n vi·∫øt n·ªôi dung theo phong c√°ch g·∫ßn g≈©i th√¢n thi·ªán d∆∞·ªõi 150 ch·ªØ v√† t·ªëi ƒëa 2 c√¢u th√¨ t√°ch th√†nh 1 ƒëo·∫°n vƒÉn.

Y√™u c·∫ßu n·ªôi dung:

Ch·ªâ c·∫ßn ch·ªçn ra 1 insight t·ª´ m√¥ t·∫£ s·∫£n ph·∫©m ƒë·ªÉ vi·∫øt n·ªôi dung.
- Lu√¥n c√≥ link v√† CTA. ƒê·ªÉ nguy√™n link s·∫£n ph·∫©m, kh√¥ng hyperlink
- Linh ho·∫°t nghƒ© insight ph√π h·ª£p v·ªõi l·ª©a tu·ªïi ch·ª© kh√¥ng ch·ªâ b√≥ bu·ªôc v√†o th√¥ng tin ƒë√£ cung c·∫•p
- Kh√¥ng ƒë·ªÅ c·∫≠p tr·ª±c ti·∫øp tu·ªïi c·ªßa kh√°ch h√†ng v√†o trong n·ªôi dung
- Vi·∫øt ho√†n to√†n b·∫±ng ti·∫øng Vi·ªát, c√≥ th·ªÉ th√™m hashtag ho·∫∑c emoji n·∫øu c·∫ßn.
- C√¢u Headline lu√¥n vi·∫øt hoa v√† c√≥ Emoji
- Kh√¥ng s·ª≠ d·ª•ng nh·ªØng t·ª´ nh∆∞ ƒê·∫ßu t∆∞, ki·∫øm ti·ªÅn, l√†m gi√†u...
- K·∫øt th√∫c content lu√¥n ch√®n ph·∫ßn ƒë·ªãa ch·ªâ c·ª≠a h√†ng sau: "_______________ 
Danh s√°ch c·ª≠a h√†ng Leonardo tr√™n to√†n qu·ªëc:

üëú H√Ä N·ªòI
CN1: 198 T√¥n ƒê·ª©c Th·∫Øng, Qu·∫≠n ƒê·ªëng ƒêa, HN

üëú TP. H·ªí CH√ç MINH
CN2: 284 Pasteur, Qu·∫≠n 3, HCM
CN3: 244 Tr·∫ßn H∆∞ng ƒê·∫°o, Qu·∫≠n 1, HCM
CN4: 513 √Çu C∆°, Qu·∫≠n T√¢n Ph√∫, HCM
CN5: 175 Quang Trung, P. 10, Qu·∫≠n G√≤ V·∫•p, HCM

üëú V≈®NG T√ÄU
CN6: 424 Tr∆∞∆°ng C√¥ng ƒê·ªãnh, Ph∆∞·ªùng 8, VT

üëú ƒê·ªíNG NAI
CN7: 552 Ph·∫°m VƒÉn Thu·∫≠n, P. Tam Hi·ªáp, TP. Bi√™n H√≤a"""

        prompt = f"""H√£y vi·∫øt cho t√¥i n·ªôi dung qu·∫£ng c√°o s√°ng t·∫°o cho s·∫£n ph·∫©m d·ª±a v√†o th√¥ng tin sau:
- Link s·∫£n ph·∫©m: {product_link}
- M√¥ t·∫£ s·∫£n ph·∫©m: {product_description}
- Kh√°ch h√†ng m·ª•c ti√™u: {gender_vn}, ƒë·ªô tu·ªïi {age_group_vn}
- Content d√πng cho n·ªÅn t·∫£ng: {platform}"""

        print("Sending request to OpenAI with prompt:", prompt[:100])  # Debug log
        
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_message},
                {"role": "user", "content": prompt}
            ],
            temperature=0.8,
            max_tokens=1000
        )

        content = response.choices[0].message.content.strip()
        print("Received response from OpenAI:", content[:100])  # Debug log

        return jsonify({
            "status": "success",
            "content": content
        })

    except openai.error.InvalidRequestError as e:
        print(f"OpenAI InvalidRequestError: {str(e)}")  # Debug log
        return jsonify({"error": f"L·ªói OpenAI API: {str(e)}"}), 400
    except openai.error.AuthenticationError as e:
        print(f"OpenAI AuthenticationError: {str(e)}")  # Debug log
        return jsonify({"error": "L·ªói x√°c th·ª±c OpenAI API key"}), 401
    except Exception as e:
        print(f"Unexpected error in generate_content: {str(e)}")  # Debug log
        return jsonify({"error": f"L·ªói: {str(e)}"}), 500

# For local development
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000)

# For Vercel
app = app 